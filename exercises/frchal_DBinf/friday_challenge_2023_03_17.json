{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "AWS CloudFormation Sample Template Rails_Multi_AZ: Create a highly available, scalable Ruby on Rails stack with a multi-AZ MySQL Amazon RDS database instance for the backend data store. This template demonstrates using the AWS CloudFormation bootstrap scripts to install the packages and files necessary to deploy a Rails application. **WARNING** This template creates one or more Amazon EC2 instances, an Application  Load Balancer and an Amazon RDS DB instance. You will be billed for the AWS resources used if you create a stack from this template.",
    "Parameters": {},
    "Mappings": {},
    "Resources": {
        "aurora_stack_vpc": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": "10.0.0.0/16",
                "EnableDnsHostnames": true,
                "EnableDnsSupport": true,
                "InstanceTenancy": "default",
                "Tags": [
                    {
                        "Key": "Name",
                        "Values": "aurora_stack_vpc"
                    }
                ]
            }
        },
        "vpc_public_subnet_1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "CidrBlock": "10.0.1.0/24",
                "AvailabilityZone": {
                    "Fn::Select": [
                        "0",
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                },
                "VpcId": {
                    "Ref": "aurora_stack_vpc"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Values": "vpc_public_subnet_1"
                    }
                ]
            }
        },
        "vpc_private_subnet_1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "CidrBlock": "10.0.2.0/24",
                "AvailabilityZone": {
                    "Fn::Select": [
                        "0",
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                },
                "VpcId": {
                    "Ref": "aurora_stack_vpc"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Values": "vpc_private_subnet_1"
                    }
                ]
            }
        },
        "vpc_private_subnet_2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "CidrBlock": "10.0.3.0/24",
                "AvailabilityZone": {
                    "Fn::Select": [
                        "1",
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                },
                "VpcId": {
                    "Ref": "aurora_stack_vpc"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Values": "vpc_private_subnet_2"
                    }
                ]
            }
        },
        "vpc_private_subnet_3": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "CidrBlock": "10.0.4.0/24",
                "AvailabilityZone": {
                    "Fn::Select": [
                        "2",
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                },
                "VpcId": {
                    "Ref": "aurora_stack_vpc"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Values": "vpc_private_subnet_3"
                    }
                ]
            }
        },
        "vpc_private_subnet_4": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "CidrBlock": "10.0.5.0/24",
                "AvailabilityZone": {
                    "Fn::Select": [
                        "3",
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                },
                "VpcId": {
                    "Ref": "aurora_stack_vpc"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Values": "vpc_private_subnet_4"
                    }
                ]
            }
        },
        "DB_subnet_group": {
            "Type": "AWS::RDS::DBSubnetGroup",
            "Properties": {
                "DBSubnetGroupDescription": "Subnets available for the RDS DB Instance",
                "SubnetIds": [
                    {
                        "Ref": "vpc_private_subnet_1"
                    },
                    {
                        "Ref": "vpc_private_subnet_2"
                    }
                ]
            }
        },
        "internet_gateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Values": "internet_gateway"
                    }
                ]
            }
        },
        "public_route_table": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "aurora_stack_vpc"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Values": "public_route_table"
                    }
                ]
            },
            "DependsOn": "internet_gateway",
            "route": {
                "Type": "AWS::EC2::Route",
                "Properties": {
                    "RouteTableId": {
                        "Ref": "public_route_table"
                    },
                    "DestinationCidrBlock": "0.0.0.0/0",
                    "GatewayId": {
                        "Ref": "internet_gateway"
                    }
                }
            }
        },
        "route_table_association_1": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "vpc_public_subnet_1"
                },
                "RouteTableId": {
                    "Ref": "public_route_table"
                }
            }
        },
        "ssh_SecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupName": "ssh_SecurityGroup",
                "GroupDescription": "Allow SSH traffic",
                "VpcId": {
                    "Ref": "aurora_stack_vpc"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "SecurityGroupEgress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "EC2_to_Eurora_SecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupName": "EC2_to_Eurora_SecurityGroup",
                "GroupDescription": "Allow SSH traffic",
                "VpcId": {
                    "Ref": "aurora_stack_vpc"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "3306",
                        "ToPort": "3306",
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "SecurityGroupEgress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "3306",
                        "ToPort": "3306",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "Aurora_SecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupName": "aurora_communication",
                "GroupDescription": "Allow communication with Aurora",
                "VpcId": {
                    "Ref": "aurora_stack_vpc"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "3306",
                        "ToPort": "3306",
                        "SourceSecurityGroupId": {
                            "Ref": "EC2_to_Eurora_SecurityGroup"
                        }
                    }
                ],
                "SecurityGroupEgress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "3306",
                        "ToPort": "3306",
                        "SourceSecurityGroupId": {
                            "Ref": "EC2_to_Eurora_SecurityGroup"
                        }
                    }
                ]
            }
        },
        "ec2_command_instance": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "ImageId": "ami-0df24e148fdb9f1d8",
                "InstanceType": "t3.micro",
                "KeyName": "vockey",
                "SubnetId": {
                    "Ref": "vpc_public_subnet_1"
                },
                "SecurityGroupIds": [
                    {
                        "Ref": "ssh_SecurityGroup"
                    },
                    {
                        "Ref": "EC2_to_Eurora_SecurityGroup"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "\n",
                            [
                                "#!/bin/bash",
                                "yum update -y",
                                "sudo yum install mariadb -y"
                            ]
                        ]
                    }
                }
            }
        },
        "RDS_cluster_Aurora": {
            "Type": "AWS::RDS::DBCluster",
            "Properties": {
                "Engine": "aurora-mysql",
                "EngineVersion": "5.7.mysql_aurora.2.11.1",
                "DatabaseName": "db",
                "MasterUsername": "admin",
                "MasterPassword": "admin123",
                "BackupRetentionPeriod": "5",
                "PreferredBackupWindow": "07:00-09:00",
                "VpcSecurityGroupIds": [
                    {
                        "Ref": "Aurora_SecurityGroup"
                    }
                ],
                "DBSubnetGroupName": {
                    "Ref": "DB_subnet_group"
                },
                "StorageEncrypted": "false",
                "DeletionProtection": "false",
                "Tags": [
                    {
                        "Key": "Name",
                        "Values": "RDS_cluster_Aurora"
                    }
                ]
            }
        },
        "DB_Aurora_Instance": {
            "Type": "AWS::RDS::DBInstance",
            "Properties": {
                "DBInstanceClass": "db.t3.small",
                "Engine": "aurora-mysql",
                "EngineVersion": "5.7.mysql_aurora.2.11.1",
                "DBClusterIdentifier": {
                    "Ref": "RDS_cluster_Aurora"
                },
                "DBSubnetGroupName": {
                    "Ref": "DB_subnet_group"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Values": "DB_Aurora_Instance"
                    }
                ]
            }
        },
        "DB_Aurora_Replica_Instance": {
            "Type": "AWS::RDS::DBInstance",
            "Properties": {
                "DBInstanceClass": "db.t3.small",
                "Engine": "aurora-mysql",
                "EngineVersion": "5.7.mysql_aurora.2.11.1",
                "DBClusterIdentifier": {
                    "Ref": "RDS_cluster_Aurora"
                },
                "DBSubnetGroupName": {
                    "Ref": "DB_subnet_group"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Values": "DB_Aurora_Replica_Instance"
                    }
                ]
            }
        }
    },
    "Outputs": {
        "EC2PublicIP": {
            "Description": "Public IP address of the EC2 instance",
            "Value": {
              "Fn::GetAtt": [
                "ec2_command_instance",
                "PublicIp"
              ]
            }
          },
          "EC2Status": {
            "Description": "Status of the EC2 instance",
            "Value": {
              "Fn::GetAtt": [
                "ec2_command_instance",
                "InstanceStatus"
              ]}
          },
        "DBInstanceEndpoint": {
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "Primary instance endpoint: ",
                        {
                            "Fn::GetAtt": [
                                "DBInstance",
                                "Endpoint.Address"
                            ]}
                    ]]
            }},
        "InstanceLaunchStatus": {
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "Instance launch status: ",
                        {
                            "Fn::If": [
                                "InstanceLaunched",
                                "Instance launched successfully",
                                "Instance launch failed"
                            ]}
                    ]]}}
    }}
