{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "AWS CloudFormation Sample Template Rails_Multi_AZ: Create a highly available, scalable Ruby on Rails stack with a multi-AZ MySQL Amazon RDS database instance for the backend data store. This template demonstrates using the AWS CloudFormation bootstrap scripts to install the packages and files necessary to deploy a Rails application. **WARNING** This template creates one or more Amazon EC2 instances, an Application  Load Balancer and an Amazon RDS DB instance. You will be billed for the AWS resources used if you create a stack from this template.",
    "Parameters": {
        "VpcId": {
            "Type": "AWS::EC2::VPC::Id",
            "Description": "VpcId of your existing Virtual Private Cloud (VPC)",
            "ConstraintDescription": "must be the VPC Id of an existing Virtual Private Cloud."
        },
        "Subnets": {
            "Type": "List<AWS::EC2::Subnet::Id>",
            "Description": "The list of SubnetIds in your Virtual Private Cloud (VPC)",
            "ConstraintDescription": "must be a list of at least two existing subnets associated with at least two different availability zones. They should be residing in the selected Virtual Private Cloud."
        },
        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
        },
        "DBName": {
            "Default": "MyDatabase",
            "Description": "MySQL database name",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "64",
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
        },
        "DBUser": {
            "NoEcho": "true",
            "Description": "Username for MySQL database access",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "16",
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
        },
        "DBPassword": {
            "NoEcho": "true",
            "Description": "Password for MySQL database access",
            "Type": "String",
            "MinLength": "8",
            "MaxLength": "41",
            "AllowedPattern": "[a-zA-Z0-9]*",
            "ConstraintDescription": "must contain only alphanumeric characters."
        },
        "DBAllocatedStorage": {
            "Default": "5",
            "Description": "The size of the database (Gb)",
            "Type": "Number",
            "MinValue": "5",
            "MaxValue": "1024",
            "ConstraintDescription": "must be between 5 and 1024Gb."
        },
        "DBInstanceClass": {
            "Description": "The database instance type",
            "Type": "String",
            "Default": "db.t2.small",
            "AllowedValues": [
                "db.t1.micro",
                "db.m1.small",
                "db.m1.medium",
                "db.m1.large",
                "db.m1.xlarge",
                "db.m2.xlarge",
                "db.m2.2xlarge",
                "db.m2.4xlarge",
                "db.m3.medium",
                "db.m3.large",
                "db.m3.xlarge",
                "db.m3.2xlarge",
                "db.m4.large",
                "db.m4.xlarge",
                "db.m4.2xlarge",
                "db.m4.4xlarge",
                "db.m4.10xlarge",
                "db.r3.large",
                "db.r3.xlarge",
                "db.r3.2xlarge",
                "db.r3.4xlarge",
                "db.r3.8xlarge",
                "db.m2.xlarge",
                "db.m2.2xlarge",
                "db.m2.4xlarge",
                "db.cr1.8xlarge",
                "db.t2.micro",
                "db.t2.small",
                "db.t2.medium",
                "db.t2.large"
            ],
            "ConstraintDescription": "must select a valid database instance type."
        },
        "MultiAZDatabase": {
            "Default": "true",
            "Description": "Create a Multi-AZ MySQL Amazon RDS database instance",
            "Type": "String",
            "AllowedValues": [
                "true",
                "false"
            ],
            "ConstraintDescription": "must be either true or false."
        },
        
        "InstanceType": {
            "Description": "EC2 instance type",
            "Type": "String",
            "Default": "t2.micro",
            "AllowedValues": [
                "t1.micro",
                "t2.nano",
                "t2.micro",
                "t2.small",
                "t2.medium",
                "t2.large",
                "m1.small",
                "m1.medium",
                "m1.large",
                "m1.xlarge",
                "m2.xlarge",
                "m2.2xlarge",
                "m2.4xlarge",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "m4.10xlarge",
                "c1.medium",
                "c1.xlarge",
                "c3.large",
                "c3.xlarge",
                "c3.2xlarge",
                "c3.4xlarge",
                "c3.8xlarge",
                "c4.large",
                "c4.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge",
                "g2.2xlarge",
                "g2.8xlarge",
                "r3.large",
                "r3.xlarge",
                "r3.2xlarge",
                "r3.4xlarge",
                "r3.8xlarge",
                "i2.xlarge",
                "i2.2xlarge",
                "i2.4xlarge",
                "i2.8xlarge",
                "d2.xlarge",
                "d2.2xlarge",
                "d2.4xlarge",
                "d2.8xlarge",
                "hi1.4xlarge",
                "hs1.8xlarge",
                "cr1.8xlarge",
                "cc2.8xlarge",
                "cg1.4xlarge"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "SSHLocation": {
            "Description": " The IP address range that can be used to SSH to the EC2 instances",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "0.0.0.0/0",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
        }
    },
    "Mappings": {
    },
    "Resources": {
        "aurora_stack_vpc":
        {
            "Type" : "AWS::EC2::VPC",
            "Properties" : {
                "CidrBlock" : "10.0.0.0/16",
                "EnableDnsHostnames" : true,
                "EnableDnsSupport" : true,
                "InstanceTenancy": "default",
                "Tags" : [ 
                    { "Key": "Name", 
                      "Values": "aurora_stack_vpc" 
                    }
                ]
              }
        },
        "vpc_public_subnet_1":
        {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "CidrBlock" : "10.0.1.0/24",
                "AvailabilityZone" : {
                    "Fn::Select": [ "0", { "Fn::GetAZs": { "Ref": "AWS::Region" } } ]},
                "VpcId" : { "Ref" : "aurora_stack_vpc" },
                "Tags" : [ 
                    { "Key": "Name", 
                      "Values": "vpc_public_subnet_1" 
                    }
                ]
            }
        },
        "vpc_private_subnet_1":
        {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "CidrBlock" : "10.0.2.0/24",
                "AvailabilityZone" : {
                    "Fn::Select": [ "0", { "Fn::GetAZs": { "Ref": "AWS::Region" } } ]},
                "VpcId" : { "Ref" : "aurora_stack_vpc" },
                "Tags" : [ 
                    { "Key": "Name", 
                      "Values": "vpc_private_subnet_1" 
                    }
                ]
            }
        },
        "vpc_private_subnet_2":
        {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "CidrBlock" : "10.0.3.0/24",
                "AvailabilityZone" : {
                    "Fn::Select": [ "1", { "Fn::GetAZs": { "Ref": "AWS::Region" } } ]},
                "VpcId" : { "Ref" : "aurora_stack_vpc" },
                "Tags" : [ 
                    { "Key": "Name", 
                      "Values": "vpc_private_subnet_2" 
                    }
                ]
            }
        },
        "vpc_private_subnet_3":
        {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "CidrBlock" : "10.0.4.0/24",
                "AvailabilityZone" : {
                    "Fn::Select": [ "2", { "Fn::GetAZs": { "Ref": "AWS::Region" } } ]},
                "VpcId" : { "Ref" : "aurora_stack_vpc" },
                "Tags" : [ 
                    { "Key": "Name", 
                      "Values": "vpc_private_subnet_3" 
                    }
                ]
            }
        },
        "vpc_private_subnet_4":
        {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "CidrBlock" : "10.0.5.0/24",
                "AvailabilityZone" : {
                    "Fn::Select": [ "3", { "Fn::GetAZs": { "Ref": "AWS::Region" } } ]},
                "VpcId" : { "Ref" : "aurora_stack_vpc" },
                "Tags" : [ 
                    { "Key": "Name", 
                      "Values": "vpc_private_subnet_4" 
                    }
                ]
            }
        },
        "DB_subnet_group":
        {
            "Type" : "AWS::RDS::DBSubnetGroup",
            "Properties" : {
                "DBSubnetGroupDescription" : "Subnets available for the RDS DB Instance",
                "SubnetIds" : [
                    { "Ref" : "vpc_private_subnet_1" },
                    { "Ref" : "vpc_private_subnet_2" }
                ]
            }
        },
        "internet_gateway":
        {
            "Type" : "AWS::EC2::InternetGateway",
            "Properties" : {
                "Tags" : [ 
                    { "Key": "Name", 
                      "Values": "internet_gateway" 
                    }
                ]
            }
        },
        "public_route_table":
        {
            "Type" : "AWS::EC2::RouteTable",
            "Properties" : {
                "VpcId" : { "Ref" : "aurora_stack_vpc" },
                "Tags" : [ 
                    { "Key": "Name", 
                      "Values": "public_route_table" 
                    }
                ]
            },
            "DependsOn" : "internet_gateway",
            "route" : {
                "Type" : "AWS::EC2::Route",
                "Properties" : {
                    "RouteTableId" : { "Ref" : "public_route_table" },
                    "DestinationCidrBlock" : "0.0.0.0/0",
                    "GatewayId" : { "Ref" : "internet_gateway" }
                }
            }
        },
        "route_table_association_1":
        {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "vpc_public_subnet_1" },
                "RouteTableId" : { "Ref" : "public_route_table" }
            }
        },
        
        "ssh_SecurityGroup":
        {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupName" : "ssh_SecurityGroup",
                "GroupDescription" : "Allow SSH traffic",
                "VpcId" : { "Ref" : "aurora_stack_vpc" },
                "SecurityGroupIngress" : [
                    {
                        "IpProtocol" : "tcp",
                        "FromPort" : "22",
                        "ToPort" : "22",
                        "CidrIp" : "0.0.0.0/0"
                    }
                ],
                "SecurityGroupEgress" : [
                    {
                        "IpProtocol" : "tcp",
                        "FromPort" : "22",
                        "ToPort" : "22",
                        "CidrIp" : "0.0.0.0/0"
                    }
                ]
            }
        },
        "EC2_to_Eurora_SecurityGroup":
        {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupName" : "EC2_to_Eurora_SecurityGroup",
                "GroupDescription" : "Allow SSH traffic",
                "VpcId" : { "Ref" : "aurora_stack_vpc" },
                "SecurityGroupIngress" : [
                    {
                        "IpProtocol" : "tcp",
                        "FromPort" : "3306",
                        "ToPort" : "3306",
                        "CidrIp" : "0.0.0.0/0"
                    }],
                "SecurityGroupEgress" : [
                    {
                        "IpProtocol" : "tcp",
                        "FromPort" : "3306",
                        "ToPort" : "3306",
                        "CidrIp" : "0.0.0.0/0"
                    }
                ]
            }
        },    
        "Aurora_SecurityGroup":
        {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupName" : "aurora_communication",
                "GroupDescription" : "Allow communication with Aurora",
                "VpcId" : { "Ref" : "aurora_stack_vpc" },
                "SecurityGroupIngress" : [
                    {
                        "IpProtocol" : "tcp",
                        "FromPort" : "3306",
                        "ToPort" : "3306",
                        "SourceSecurityGroupId": { "Ref": "EC2_to_Eurora_SecurityGroup" }
                    }
                ],
                "SecurityGroupEgress" : [
                    {
                        "IpProtocol" : "tcp",
                        "FromPort" : "3306",
                        "ToPort" : "3306",
                        "SourceSecurityGroupId": { "Ref": "EC2_to_Eurora_SecurityGroup" }
                    }
                ]
            }
        },

        "ec2_command_instance":
        {
            "Type" : "AWS::EC2::Instance",
            "Properties" : {
                "ImageId": "ami-0df24e148fdb9f1d8",
                "InstanceType": "t3.micro",
                "KeyName" : "vockey",
                "SubnetId": { "Ref": "vpc_public_subnet_1" },
                "SecurityGroupIds" : [ { 
                    "Ref": "ssh_SecurityGroup" }, 
                    { "Ref": "EC2_to_Eurora_SecurityGroup" }
                ],
                "UserData" : {
                "Fn::Base64": {
                    "Fn::Join": [
                      "\n",
                      [
                    "#!/bin/bash",
                    "yum update -y",
                    "sudo yum install mariadb -y"]]}}
              }}
        },
        "RDS_cluster_Aurora":
        {
            "Type" : "AWS::RDS::DBCluster",
            "Properties" : {
                "Engine" : "aurora-mysql",
                "EngineVersion" : "5.7.mysql_aurora.2.11.1",
                "DatabaseName" : "db",
                "MasterUsername" : "admin",
                "MasterPassword" : "admin123",
                "BackupRetentionPeriod" : "5",
                "PreferredBackupWindow" : "07:00-09:00",
                "VpcSecurityGroupIds" : [ 
                    { "Ref" :                     "Aurora_SecurityGroup" } ],
                "DBSubnetGroupName" : { "Ref" : "DB_subnet_group" },
                "StorageEncrypted" : "false",
                "DeletionProtection" : "false",
                "Tags" : [ 
                    { "Key": "Name", 
                      "Values": "RDS_cluster_Aurora" 
                    }]
            }
        },
        "DB_Aurora_Instance":
        {
            "Type" : "AWS::RDS::DBInstance",
            "Properties" : {
                "DBInstanceClass" : "db.t3.small",
                "Engine" : "aurora-mysql",
                "EngineVersion" : "5.7.mysql_aurora.2.11.1",
                "DBClusterIdentifier" : 
                    { "Ref" : "RDS_cluster_Aurora" },
                "DBSubnetGroupName" : { "Ref" : "DB_subnet_group" },
                "Tags" : [ 
                    { "Key": "Name", 
                      "Values": "DB_Aurora_Instance" 
                    }]
            }
        },
        "DB_Aurora_Replica_Instance": {
            "Type": "AWS::RDS::DBInstance",
            "Properties": {
                "DBInstanceClass": "db.t3.small",
                "Engine": "aurora-mysql",
                "EngineVersion": "5.7.mysql_aurora.2.11.1",
                "DBClusterIdentifier": { "Ref": "RDS_cluster_Aurora" },
                "DBSubnetGroupName": { "Ref": "DB_subnet_group" },
                "Tags": [
                    { "Key": "Name", 
                    "Values": "DB_Aurora_Replica_Instance" 
                    }]
            }
        }
    },
    "Outputs": {
    }
}